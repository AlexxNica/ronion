// Generated by LiveScript 1.5.0
/**
 * @package   Ronion
 * @author    Nazar Mokrynskyi <nazar@mokrynskyi.com>
 * @copyright Copyright (c) 2017, Nazar Mokrynskyi
 * @license   MIT License, see license.txt
 */
(function(){
  var asyncEventer, COMMAND_CREATE_REQUEST, COMMAND_CREATE_RESPONSE, COMMAND_EXTEND_REQUEST, COMMAND_EXTEND_RESPONSE, COMMAND_DESTROY, COMMAND_DATA, COMMANDS_PLAINTEXT, COMMANDS_ENCRYPTED;
  asyncEventer = require('async-eventer');
  module.exports = {
    Router: Router
  };
  COMMAND_CREATE_REQUEST = 1;
  COMMAND_CREATE_RESPONSE = 2;
  COMMAND_EXTEND_REQUEST = 3;
  COMMAND_EXTEND_RESPONSE = 4;
  COMMAND_DESTROY = 5;
  COMMAND_DATA = 6;
  COMMANDS_PLAINTEXT = new Set([COMMAND_CREATE_REQUEST, COMMAND_CREATE_RESPONSE]);
  COMMANDS_ENCRYPTED = new Set([COMMAND_EXTEND_REQUEST, COMMAND_EXTEND_RESPONSE, COMMAND_DESTROY, COMMAND_DATA]);
  /**
   * @param {Uint8Array} array
   *
   * @return {string}
   */
  function to_string(array){
    return array.join('');
  }
  /**
   * @param {Uint8Array} packet
   *
   * @return {array} [version: number, segment_id: Uint8Array]
   */
  function parse_packet_header(packet){
    return [packet[0], packet.subarray(1, 2)];
  }
  /**
   * @param {Uint8Array} packet_data
   *
   * @return {number[]} [command, command_data_length]
   */
  function parse_packet_data_header(packet_data){
    return [packet_data[0], packet_data[0] * 256 + packet_data[1]];
  }
  /**
   * @param {Uint8Array} packet_data
   *
   * @return {array} [command: number, command_data: Uint8Array]
   */
  function parse_packet_data_plaintext(packet_data){
    var ref$, command, command_data_length;
    ref$ = parse_packet_data_header(packet_data), command = ref$[0], command_data_length = ref$[1];
    return [command, packet_data.slice(3, 3 + command_data_length)];
  }
  /**
   * @constructor
   */
  function Router(version, packet_size, address_length, mac_length){
    if (!(this instanceof Router)) {
      return new Router(version, packet_size, address_length, mac_length);
    }
    asyncEventer.call(this);
    this._version = version;
    this._packet_size = packet_size;
    this._address_length = address_length;
    this._mac_length = mac_length;
    this._established_segments = new Set;
  }
  Router.prototype = {
    /**
     * @param {Uint8Array}	source_address	Address (in application-specific format) where packet came from
     * @param {Uint8Array}	packet			Packet
     */
    process_packet: function(source_address, packet){
      var ref$, version, segment_id, source_id, packet_data;
      if (packet.length !== this._packet_size) {
        return;
      }
      ref$ = parse_packet_header(packet), version = ref$[0], segment_id = ref$[1];
      if (version !== this._version) {
        return;
      }
      source_id = to_string(source_address) + to_string(segment_id);
      packet_data = packet.subarray(3);
      if (!this._established_paths.has(source_id)) {
        this._process_packet_data_plaintext(source_id, packet_data);
      } else {
        this._process_packet_data_encrypted(source_id, packet_data);
      }
    }
    /**
     * @param {string}		source_id
     * @param {Uint8Array}	packet_data
     */,
    _process_packet_data_plaintext: function(source_id, packet_data){
      var ref$, command, command_data;
      ref$ = parse_packet_data_plaintext(packet_data), command = ref$[0], command_data = ref$[1];
      if (!COMMANDS_PLAINTEXT.has(command) && !command_data.length) {
        return;
      }
    }
    /**
     * @param {string}		source_id
     * @param {Uint8Array}	packet_data
     */,
    _process_packet_data_encrypted: function(source_id, packet_data){}
  };
  Router.prototype = Object.assign(Object.create(asyncEventer.prototype), Router.prototype);
  Object.defineProperty(Router.prototype, 'constructor', {
    enumerable: false,
    value: Router
  });
}).call(this);
